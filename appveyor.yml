version: 3.0.0.{build}
image: Visual Studio 2019
skip_non_tags: true

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: "{version}"
  package_version: "{version}"
  assembly_version: "{version}"
  file_version: "{version}"
  informational_version: "{version}"

before_build:
  - ps: >-
      nuget restore

build:
  project: C:\projects\dotfeather\src\dotfeather.csproj
  publish_nuget: true

configuration: Release

after_build:
  - nuget pack -Prop Configuration=Release src -OutputDirectory src/bin/Release/

artifacts:
  - path: '**\*.nupkg'
    name: DotFeather

deploy:
  - provider: NuGet
    api_key:
      # Use encrypt tool
      # https://ci.appveyor.com/tools/encrypt
      secure: 0p+A7xhW2Qex9C3sIr4LXPFBNUCxVd1NPvnKH0Yy6uETIpnSAa5q/DkQtOH9Sy9q
    artifact: /.*\.nupkg/
    on:
      appveyor_repo_tag: true
  - provider: GitHub
    artifact: /.*\.nupkg/ # upload all NuGet packages to release assets
    draft: false
    prerelease: false
    description: |
      # 3.0.0 Most Revolutionary Update

      ## 新機能
      - ElementBase 抽象クラスを追加しました
        - ElementBase を継承するクラスを Element と呼び、DotFeather v3 における描画の基本単位とします
      - Texture9Sliced 構造体を追加しました
      - Component 抽象クラスを追加しました
        - Component クラスを継承したコンポーネントを Element にアタッチすることで、新しいクラスを作ることなくElementを拡張できます
      - Shape Elementを追加しました
      - `IWindow` インターフェイス を追加
        - ゲームのレンダリングを行う画面周りの機能を提供します
        - `GameBase` の持っていたメンバーの多くが提供されます
      - `IConsole` インターフェイスを追加
        - `Gamebase` の `Print` `Cls` `ConsoleCursor` など、コンソール系の API はこちらです
      - `DF` 静的クラスを追加
        - `Run` `Exit` `NextFrame` メソッド、`Root` プロパティなどを含みます
      - 図形描画用の低レベル API を追加
        - `IPrimitiveDrawer` インターフェイスを追加
          - `Shape` エレメントはこの API を使うように
      - Tilemap#RenderingMode プロパティ（TilemapRenderingMode 型）を追加しました
        - TilemapRenderingMode.RenderAll
          - 全タイルのうち、画面に存在するものを毎回描画します（従来方式）
        - TilemapRenderingMode.Scan
          - 画面の左上から右下まで走査し、存在するタイルを描画します（新アルゴリズム）
        - TilemapRenderingMode.Auto
          - 画面に存在可能なタイル数よりも実際のタイル数が多い場合はScan, 少ない場合はRenderAllを意味します
          - 標準はこれ
          - どちらが最適なアルゴリズムかわかりきっている場合や、新方式で問題が発生する場合などは手動で設定してください

      ## 改善
      - `Vector` クラスと `(float, float)` タプル間で暗黙的型変換されるように
        - 例えば `Location = (16, 48)` というシンプルな書き方ができます
      - `VectorInt` クラスと `(int, int)` タプル間で暗黙的型変換されるように

      ## 破壊的変更

      本アップデートは、非常に多くの破壊的変更を含みます。[v2からのマイグレーションガイド](https://xeltica.github.io/DotFeather/docs/ja/migrate/v2.html)を参照し、お使いのプロジェクトを更新してください。

      **なお、近日中にv2との互換性をある程度向上するためのプラグインを公開予定です。**

      ## バグ修正
      - テキストの描画がおかしい問題を修正

      ## その他
      - 依存関係を更新

    auth_token:
      secure: 1k6f11E9bN8eBIzSz4tDjART0Nk5agF+JvR85X+w8Lb8GgJSJTr2uPlZrM+TyIja
    on:
      APPVEYOR_REPO_TAG: true # deploy on tag push only
